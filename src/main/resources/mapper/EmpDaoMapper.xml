<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.poplar.dao.EmpDao">

    <update id="update">
        update emp
        set ename=#{ename}
        where empno = #{empno}
    </update>

    <delete id="delete">
        delete
        from emp
        where empno = #{empno}
    </delete>

    <select id="selectEmpByEmpno" resultType="com.poplar.bean.Emp">
        select * from emp where empno = #{ddddd}
    </select>
    <!--
    返回的的结果是一个集合的时候，并不需要resultap,使用resultType即可，只需要指定返回list中结果的类型
    #{}使用sql预编译的方式，可以防止sql注入的问题
    ${}直接字符串拼接，当然比如在，动态表名，列明时也有自己的使用场景

    当查询语句中包含多个参数的 时候，我们应该如何获取需要的参数？
    1.如果是单个参数
     基本数据类型：使用#{}随便怎么获取,如：select * from emp where empno = #{ddddd}完成没问题
     引用数据类型：使用#{}获取值得时候，必须要是有对象的属性名

    2.如果十多个参数：、
    我们在获取参数值的时候就不能简单的通过#{}来获取，只能通过:arg0,arg1,parma1,parma2这种方式来获取值，
    Parameter 'deptno' not found. Available parameters are [arg1, arg0, param1, param2]
    原因在于mybatis在传入多个参数的时候，会将这些参数结果封装到map结构中，在map中的结果就是（arg0,arg1）,(param0,param1),
    这种方式非常不友好，不能根据属性名来获取具体参数的值
    如果想要使用属性名来获取参数值的话可以进行如下设置：
    selectEmpByEmpnoAndSal(@Param("deptno") Integer deptno, @Param("sal") Double sal);

    3.自定义map结构：

    -->
    <select id="selectAll" resultType="com.poplar.bean.Emp">
        select *
        from emp
    </select>

    <select id="selectEmpByEmpnoAndSal" resultType="com.poplar.bean.Emp">
        select *
        from emp where deptno=#{deptno} and sal>#{sal}
    </select>

    <select id="selectEmpByEmpnoAndSalMap" resultType="com.poplar.bean.Emp">
        select *
        from emp where deptno=#{deptno} and sal>#{sal}
    </select>

    <resultMap id="EmpAndDeptByEmpno" type="com.poplar.bean.Emp">
        <id property="empno" column="empno"/>
        <result property="ename" column="ename"/>
        <result property="job" column="job"/>
        <result property="mgr" column="mgr"/>
        <result property="comm" column="comm"/>
        <result property="hiredate" column="hiredate"/>
        <result property="sal" column="sal"/>
       <!-- <result property="dept.deptno" column="deptno"/>
        <result property="dept.loc" column="loc"/>
        <result property="dept.dname" column="dname"/>-->
        <association property="dept" javaType="com.poplar.bean.Dept">
            <id property="deptno" column="deptno"/>
            <result property="dname" column="dname"/>
            <result property="loc" column="loc"/>
        </association>
    </resultMap>

    <select id="selectEmpAndDeptByEmpno" resultMap="EmpAndDeptByEmpno">
        select * from emp left join dept on emp.deptno=dept.deptno where emp.empno=#{empno}
    </select>

    <!-- if-->
<!--    <select id="selectEmpByCondition" resultType="com.poplar.bean.Emp">
        select * from emp
        <where>
            <if test="empno!=null">
                and empno=#{empno}
            </if>
            <if test="ename!=null">
                and ename=#{ename}
            </if>
            <if test="sal!=null">
                and sal > #{sal}
            </if>
        </where>

    </select>-->

    <!--choose-->
    <select id="selectEmpByCondition" resultType="com.poplar.bean.Emp">
        select * from emp
        <where>
            <choose>
                <when test="ename!=null">
                    and ename=#{ename}
                </when>
                <when test="sal!=null">
                    and sal > #{sal}
                </when>
                <otherwise>
                    and empno=#{empno}
                </otherwise>
            </choose>
        </where>
    </select>

    <!--foreach-->

    <select  id="selectEmpByConditionByIn" resultType="com.poplar.bean.Emp">
        select * from emp where empno in
        <foreach collection="empnos" separator="," item="empno" open="(" close=")" index="idx">
            #{empno}
        </foreach>

    </select>

    <insert id="save">
        insert into emp(empno, ename)
        values (#{empno}, #{ename});
    </insert>


    <!--
    mybatis中的缓存机制：
        如果没有缓存，那么每次查询的时候都需要从数据库中加载数据，这回造成io的性能问题，所以，在很多情况下
        如果连续执行两条相同的sql语句，可以直接从缓存中获取，如果获取不到，那么再去查询数据库，这意味着查询完成的结果
        需要放到缓存中。

        缓存分类：
            1、一级缓存：表示sqlSession级别的缓存，每次查询的时候会开启一个会话，此会话相当于一次连接，关闭之后自动失效
            2、二级缓存：全局范围内的缓存，sqlsession关闭之后才会生效
            3、第三方缓存：继承第三方的组件，来充当缓存的作用
        ==================
        一级缓存：表示将数据存储在sqlsession中，关闭之后自动失效，默认情况下是开启的
            在同一个会话之内，如果执行了多个相同的sql语句，那么除了第一个之外，所有的数据都是从缓存中进行查询的

            在某些情况下，一级缓存可能会失效？
                1、在同一个方法中，可能会开启多个会话，此时需要注意，会话跟方法没有关系，不是一个方法就只能由一个会话，所以严格
                    记住,缓存的数据是保存在sqlsession中的
                2、当传递对象的时候，如果对象中的属性值不同，也不会走缓存
                3、在同一个连接中，如果修改了数据，那么缓存会失效，不同连接之间是不受影响的
                4、如果在一个会话过程中，手动清空了缓存，那么缓存也会失效
        二级缓存：表示的是全局缓存，必须要等到sqlsession关闭之后才会生效
            默认是不开启的，如果需要开启的话，需要进行如下设置
                1、修改全局配置文件，在settings中添加配置
                    <setting name="cacheEnabled" value="true"/>
                2、指定在哪个映射文件中使用缓存的配置
                    <cache></cache>
                3、对应的java实体类必须要实现序列化的接口
            在使用二级缓存的时候，可以包含多个属性值：
                eviction：缓存淘汰机制：
                        LRU： 最近最少使用
                        FIFO:先进先出，按照添加缓存的顺序执行
                        SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。
                        WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。
                flushInterval：设置多长时间进行缓存刷新
                size:引用的条数，是一个正整数，缓存中可以存储多少个对象，一般不设置，如果设置的话不要太大，会导致内存溢出
                readonly:只读属性：
                        true:只读缓存，会给所有的调用的方法返回该对象的实例，不安全
                        false:读写缓存，只是返回缓存对象的拷贝，比较安全

                一级缓存跟二级缓存有没有可能同时存在数据？
                        不会同时存在，因为二级缓存生效的时候，是在sqlsession关闭的时候
                当查询数据的时候，我们是先查询一级缓存还是先查询二级缓存？
                        先查询二级缓存，然后再查询一级缓存

    -->

    <cache type="org.mybatis.caches.ehcache.EhBlockingCache"/>
</mapper>
